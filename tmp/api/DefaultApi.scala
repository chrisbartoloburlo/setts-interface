/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package examples.featuresservice.api

import examples.featuresservice.model.Feature
import examples.featuresservice.model.Product
import examples.featuresservice.model.ProductConfiguration
import scala.collection.immutable.Set
import examples.featuresservice.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object DefaultApi {

def apply(baseUrl: String = "http://localhost:8080") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   * @param configurationName 
   */
  def addConfiguration(productName: String, configurationName: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/products/${productName}/configurations/${configurationName}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   * @param sourceFeature 
   * @param excludedFeature 
   */
  def addExcludesConstraintToProduct(productName: String, sourceFeature: String, excludedFeature: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/products/${productName}/constraints/excludes")
      .contentType("application/x-www-form-urlencoded")
      .body(Map(
        "sourceFeature" -> sourceFeature,
        "excludedFeature" -> excludedFeature
      ))
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   * @param configurationName 
   * @param featureName 
   */
  def addFeatureToConfiguration(productName: String, configurationName: String, featureName: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/products/${productName}/configurations/${configurationName}/features/${featureName}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   * @param featureName 
   * @param description 
   */
  def addFeatureToProduct(productName: String, featureName: String, description: Option[String] = None
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/products/${productName}/features/${featureName}")
      .contentType("application/x-www-form-urlencoded")
      .body(Map(
        "description" -> description
      ))
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   */
  def addProduct(productName: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/products/${productName}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   * @param sourceFeature 
   * @param requiredFeature 
   */
  def addRequiresConstraintToProduct(productName: String, sourceFeature: String, requiredFeature: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/products/${productName}/constraints/requires")
      .contentType("application/x-www-form-urlencoded")
      .body(Map(
        "sourceFeature" -> sourceFeature,
        "requiredFeature" -> requiredFeature
      ))
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   * @param configurationName 
   */
  def deleteConfiguration(productName: String, configurationName: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/products/${productName}/configurations/${configurationName}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   * @param constraintId 
   */
  def deleteConstraint(productName: String, constraintId: Long
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/products/${productName}/constraints/${constraintId}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   * @param configurationName 
   * @param featureName 
   */
  def deleteFeature(productName: String, configurationName: String, featureName: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/products/${productName}/configurations/${configurationName}/features/${featureName}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   * @param featureName 
   */
  def deleteFeatureOfProduct(productName: String, featureName: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/products/${productName}/features/${featureName}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param productName 
   */
  def deleteProductByName(productName: String
): Request[Either[Either[String, String], Unit], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/products/${productName}")
      .contentType("application/json")
      .response(asEither(asString, ignore))

  /**
   * Expected answers:
   *   code 200 : Seq[String] (successful operation)
   */
  def getAllProducts(
): Request[Either[ResponseException[String, Exception], Seq[String]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products")
      .contentType("application/json")
      .response(asJson[Seq[String]])

  /**
   * Expected answers:
   *   code 200 : Seq[String] (successful operation)
   * 
   * @param productName 
   * @param configurationName 
   */
  def getConfigurationActivedFeatures(productName: String, configurationName: String
): Request[Either[ResponseException[String, Exception], Seq[String]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/${productName}/configurations/${configurationName}/features")
      .contentType("application/json")
      .response(asJson[Seq[String]])

  /**
   * Expected answers:
   *   code 200 : ProductConfiguration (successful operation)
   * 
   * @param productName 
   * @param configurationName 
   */
  def getConfigurationWithNameForProduct(productName: String, configurationName: String
): Request[Either[ResponseException[String, Exception], ProductConfiguration], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/${productName}/configurations/${configurationName}")
      .contentType("application/json")
      .response(asJson[ProductConfiguration])

  /**
   * Expected answers:
   *   code 200 : Seq[String] (successful operation)
   * 
   * @param productName 
   */
  def getConfigurationsForProduct(productName: String
): Request[Either[ResponseException[String, Exception], Seq[String]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/${productName}/configurations")
      .contentType("application/json")
      .response(asJson[Seq[String]])

  /**
   * Expected answers:
   *   code 200 : Set[Feature] (successful operation)
   * 
   * @param productName 
   */
  def getFeaturesForProduct(productName: String
): Request[Either[ResponseException[String, Exception], Set[Feature]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/${productName}/features")
      .contentType("application/json")
      .response(asJson[Set[Feature]])

  /**
   * Expected answers:
   *   code 200 : Product (successful operation)
   * 
   * @param productName 
   */
  def getProductByName(productName: String
): Request[Either[ResponseException[String, Exception], Product], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/products/${productName}")
      .contentType("application/json")
      .response(asJson[Product])

  /**
   * Expected answers:
   *   code 200 : Feature (successful operation)
   * 
   * @param productName 
   * @param featureName 
   * @param description 
   */
  def updateFeatureOfProduct(productName: String, featureName: String, description: Option[String] = None
): Request[Either[ResponseException[String, Exception], Feature], Any] =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/products/${productName}/features/${featureName}")
      .contentType("application/x-www-form-urlencoded")
      .body(Map(
        "description" -> description
      ))
      .response(asJson[Feature])

}
